dpkg -i rustscan_1.8.0_amd64.deb



多IP掃描

rustscan -a 127.0.0.1,0.0.0.0

------------------------------------------

主機掃描
rustscan -a www.google.com，127.0.0.1

------------------------------------------

CIDR 支持
rustscan -a 192.168.0.0/30


------------------------------------------
iplist.txt 檔案作為輸入
192.168.0.1
192.168.0.2
google.com
192.168.0.0/30
127.0.0.1


------------------------------------------
單獨連接埠掃描

rustscan -a 127.0.0.1 -p 53 

------------------------------------------
多選連接埠掃描
rustscan -a 127.0.0.1 -p 53,80,121,65535 


------------------------------------------

連接埠範圍
rustscan -a 127.0.0.1 --range 1-1000    

------------------------------------------

rustscan -a 127.0.0.1 -- -A -sC

-a 127.0.0.1: 指定目標 IP 地址為 127.0.0.1，也就是本地主機。
--: 在這裡，-- 表示將後面的參數傳遞給 Nmap，而不是 RustScan 自身。
-A: 啟用 Nmap 的 Aggressive 模式，包括操作系統檢測、版本檢測、脆弱性檢測等。
-sC: 啟用 Nmap 的脚本掃描，運行默認脚本。


------------------------------------------
隨機連接埠排序 這將有助於不觸發防火牆

rustscan -a 127.0.0.1 --range 1-1000 --scan-order "Random"




掃描完後，我們發現 1000 以下有多少個連接埠是開放的？

rustscan -a 10.10.142.174 --range 1-1000   

22/tcp open  ssh     syn-ack
80/tcp open  http    syn-ack



-------------------------------------------------------




rustscan -a 10.10.142.174 -- -A -sC



22/tcp open  ssh     syn-ack OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.10 (Ubuntu Linux; protocol 2.0)

80/tcp open  http    syn-ack Apache httpd 2.4.7 ((Ubuntu))
-------------------------------------------------------

執行主動掃描，連接埠 80 的結果下未設定什麼標誌？
httponly


| http-cookie-flags: 
|   /: 
|     PHPSESSID: 
|_      httponly flag not set


在設定一個cookie時，如果希望該cookie僅由伺服器端訪問，而不允許瀏覽器的JavaScript訪問，可以將HttpOnly屬性添加到Set-Cookie標頭中。例如

-------------------------------------------------------


rust 選項的功能

通常稱為“安靜”模式，什麼交換機可以做到這一點？
-q

哪個開關可以幫助我們掃描特定範圍？
-r

您將使用什麼開關來尋找 RustScan 的版本？
-v

哪個開關可以幫助我們選擇批量大小？
-b

哪個開關可以設定超時？
-t


在 RustScan 中，`-b` 和 `-t` 選項分別用於設定批量大小和超時。以下是這兩個選項的使用示範：

### `-b` 選項示範：

`-b` 選項用於指定同時處理的埠的數量，這有助於提高掃描的效率。例如：

```bash
rustscan -a 127.0.0.1 -b 1000
```

這個命令指示 RustScan 同時處理 1000 個埠。這對於快速的大規模掃描可能是有效的，但需要根據目標系統的性能進行調整，以避免過多的同時連接。

### `-t` 選項示範：

`-t` 選項用於設置超時時間，即等待每個端口響應的時間。例如：

```bash
rustscan -a 127.0.0.1 -t 5000
```

這個命令指示 RustScan 設置超時時間為 5000 毫秒（5 秒）。這是等待每個端口響應的最大時間。如果某個端口在這個時間內沒有響應，則 RustScan 將視為該端口關閉或不可訪問。

這兩個選項可以根據具體的情況進行調整，以確保掃描在效率和性能之間取得良好的平衡。


-------------------------------------------------------